# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _pyac2dcu
else:
    import _pyac2dcu

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



def LibeInit():
    return _pyac2dcu.LibeInit()

def GpuNew(n):
    return _pyac2dcu.GpuNew(n)

def GpuDelete(f):
    return _pyac2dcu.GpuDelete(f)

def GpuError():
    return _pyac2dcu.GpuError()

def PyepsCre1ds(Nx):
    return _pyac2dcu.PyepsCre1ds(Nx)

def PyepsDel1ds(arr):
    return _pyac2dcu.PyepsDel1ds(arr)

def PyepsSet1ds(arr, i, val):
    return _pyac2dcu.PyepsSet1ds(arr, i, val)

def PyepsCre1di(Nx):
    return _pyac2dcu.PyepsCre1di(Nx)

def PyepsDel1di(arr):
    return _pyac2dcu.PyepsDel1di(arr)

def PyepsSet1di(arr, i, val):
    return _pyac2dcu.PyepsSet1di(arr, i, val)

def PyepsCre1df(Nx):
    return _pyac2dcu.PyepsCre1df(Nx)

def PyepsDel1df(arr):
    return _pyac2dcu.PyepsDel1df(arr)

def PyepsSet1df(arr, i, val):
    return _pyac2dcu.PyepsSet1df(arr, i, val)

def PyepsCre2df(Nx, Ny):
    return _pyac2dcu.PyepsCre2df(Nx, Ny)

def PyepsDel2df(arr):
    return _pyac2dcu.PyepsDel2df(arr)

def PyepsSet2df(arr, i, j, val):
    return _pyac2dcu.PyepsSet2df(arr, i, j, val)

def ModelNew(kappa, rho, Q, Dx, Dt, W0, Nb, Rheol):
    return _pyac2dcu.ModelNew(kappa, rho, Q, Dx, Dt, W0, Nb, Rheol)

def ModelStability(Model):
    return _pyac2dcu.ModelStability(Model)

def SrcNew(source, sx, sy):
    return _pyac2dcu.SrcNew(source, sx, sy)

def RecNew(rx, ry, nt, resamp, sresamp, file):
    return _pyac2dcu.RecNew(rx, ry, nt, resamp, sresamp, file)

def RecSave(Rec, file):
    return _pyac2dcu.RecSave(Rec, file)

def Ac2dNew(Model):
    return _pyac2dcu.Ac2dNew(Model)

def Ac2dSolve(Ac2d, Model, Src, Rec, nt, l):
    return _pyac2dcu.Ac2dSolve(Ac2d, Model, Src, Rec, nt, l)


